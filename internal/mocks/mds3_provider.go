// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia/v4/internal/webauthn (interfaces: MDS3Provider)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mds3_provider.go -mock_names MDS3Provider=MockMDS3Provider github.com/authelia/authelia/v4/internal/webauthn MDS3Provider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMDS3Provider is a mock of MDS3Provider interface.
type MockMDS3Provider struct {
	ctrl     *gomock.Controller
	recorder *MockMDS3ProviderMockRecorder
	isgomock struct{}
}

// MockMDS3ProviderMockRecorder is the mock recorder for MockMDS3Provider.
type MockMDS3ProviderMockRecorder struct {
	mock *MockMDS3Provider
}

// NewMockMDS3Provider creates a new mock instance.
func NewMockMDS3Provider(ctrl *gomock.Controller) *MockMDS3Provider {
	mock := &MockMDS3Provider{ctrl: ctrl}
	mock.recorder = &MockMDS3ProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMDS3Provider) EXPECT() *MockMDS3ProviderMockRecorder {
	return m.recorder
}

// FetchMDS3 mocks base method.
func (m *MockMDS3Provider) FetchMDS3(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMDS3", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMDS3 indicates an expected call of FetchMDS3.
func (mr *MockMDS3ProviderMockRecorder) FetchMDS3(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMDS3", reflect.TypeOf((*MockMDS3Provider)(nil).FetchMDS3), ctx)
}
